import { Telegraf, Context, Markup } from "telegraf";
import type { Message, Update } from "telegraf/types";
import config from "@/config";
import db from "@/db";
import logger from "@/utils/logger";
import { getBankName } from "@/constants/banks";
import { createWriteStream, mkdirSync, existsSync } from "fs";
import { join } from "path";
import { pipeline } from "stream/promises";
import fetch from "node-fetch";

interface UserState {
  awaitingBalance: boolean;
  awaitingOperatorId: boolean;
  awaitingScreenshot: boolean;
  currentTransactionId?: string;
}

interface BotContext extends Context {
  state: {
    isAdmin: boolean;
    isOperator: boolean;
  };
}

export class TelegramBot {
  private bot: Telegraf<BotContext>;
  private userStates: Map<number, UserState>;
  private transactionMappings: Map<string, string>; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ID

  constructor() {
    this.bot = new Telegraf<BotContext>(config.TELEGRAM_BOT_TOKEN);
    this.userStates = new Map();
    this.transactionMappings = new Map();
    this.setupMiddleware();
    this.setupHandlers();

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!existsSync(config.UPLOAD_DIR)) {
      mkdirSync(config.UPLOAD_DIR, { recursive: true });
    }
  }

  private async setupMiddleware(): Promise<void> {
    this.bot.use(async (ctx, next) => {
      if (!ctx.from) return;

      const user = await db.user.findUnique({
        where: { telegramId: BigInt(ctx.from.id) },
      });

      ctx.state = {
        isAdmin: ctx.from.id === config.ADMIN_TELEGRAM_ID,
        isOperator: Boolean(user?.isAdmin),
      };

      if (!user && ctx.from.id !== config.ADMIN_TELEGRAM_ID) {
        await db.user.create({
          data: {
            telegramId: BigInt(ctx.from.id),
            username: ctx.from.username || undefined,
            isAdmin: false,
          },
        });
      }

      return next();
    });
  }

  private getMainKeyboard(isAdmin: boolean, isOperator: boolean) {
    const buttons = [];

    if (isOperator) {
      buttons.push([
        Markup.button.callback("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", "check_balance"),
        Markup.button.callback("üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", "set_balance"),
      ]);
    }

    if (isAdmin) {
      buttons.push([
        Markup.button.callback("üë• –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤", "list_operators"),
        Markup.button.callback("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "add_operator"),
      ]);
      buttons.push([
        Markup.button.callback("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "statistics"),
        Markup.button.callback("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings"),
      ]);
    }

    buttons.push([Markup.button.callback("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]);

    return Markup.inlineKeyboard(buttons);
  }

  private getCancelKeyboard() {
    return Markup.inlineKeyboard([
      [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_action")],
    ]);
  }

  public async sendPayoutRequest(
    operatorId: bigint,
    payoutData: {
      transactionId: string;
      amount: number;
      destination: string;
      walletId: string;
      expiresAt: Date;
    },
  ): Promise<void> {
    try {
      // –°–æ–∫—Ä–∞—â–∞–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ –ø–µ—Ä–≤—ã—Ö 8 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ TX_
      const shortTxId = payoutData.transactionId.substring(0, 11);
      // –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã
      const shortDestination = payoutData.destination.slice(-4);

      const message = `
  üí∞ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É*

  üíµ –°—É–º–º–∞: *${payoutData.amount.toLocaleString("ru-RU")}* RUB
  üè¶ –ë–∞–Ω–∫: *${getBankName(payoutData.walletId)}*
  ‚è± –°—Ä–æ–∫: *${payoutData.expiresAt.toLocaleString("ru-RU")}*
  üÜî ID: *${payoutData.transactionId}*
  `;

      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback(
            "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
            `ap:${shortTxId}:${shortDestination}`, // –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
          ),
        ],
      ]);

      const result = await this.bot.telegram.sendMessage(
        Number(operatorId),
        message,
        {
          parse_mode: "Markdown",
          ...keyboard,
        },
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏ –ø–æ–ª–Ω–æ–≥–æ ID –≤ –ø–∞–º—è—Ç–∏ –∏–ª–∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.saveTransactionMapping(shortTxId, payoutData.transactionId);

      logger.info(
        `Successfully sent payout request to operator ${operatorId}`,
        {
          operatorId,
          transactionId: payoutData.transactionId,
          messageId: result.message_id,
        },
      );
    } catch (error) {
      logger.error(`Error sending payout request to operator ${operatorId}:`, {
        operatorId,
        transactionId: payoutData.transactionId,
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }

  // –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞–ø–ø–∏–Ω–≥–æ–º ID
  private async saveTransactionMapping(
    shortId: string,
    fullId: string,
  ): Promise<void> {
    // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Map –≤ –ø–∞–º—è—Ç–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    this.transactionMappings.set(shortId, fullId);
  }

  private async getFullTransactionId(
    shortId: string,
  ): Promise<string | undefined> {
    return this.transactionMappings.get(shortId);
  }

  private async showMainMenu(ctx: BotContext): Promise<void> {
    if (!ctx.from) return;

    const username = ctx.from.first_name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    let message = "";

    if (ctx.state.isAdmin) {
      message =
        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!\n\n` +
        `üëë –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n` +
        `\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    } else if (ctx.state.isOperator) {
      message =
        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!\n\n` +
        `üîß –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n` +
        `\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    } else {
      message =
        `‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω\n\n` +
        `–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.`;
    }

    await ctx.reply(message, {
      parse_mode: "HTML",
      ...this.getMainKeyboard(ctx.state.isAdmin, ctx.state.isOperator),
    });
  }

  private async handleAcceptPayout(
    ctx: BotContext,
    transactionId: string,
    destination: string,
  ): Promise<void> {
    if (!ctx.from) return;

    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      logger.info(`Starting accept payout process`, {
        operatorId: ctx.from.id,
        transactionId: transactionId,
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      const transaction = await db.transaction.findUnique({
        where: { id: transactionId },
      });

      logger.info(`Transaction status check`, {
        transactionId,
        currentStatus: transaction?.status,
        userId: transaction?.userId,
      });

      if (!transaction) {
        await ctx.reply("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (transaction.status !== "PENDING") {
        logger.info(`Invalid transaction status`, {
          transactionId,
          status: transaction.status,
        });
        await ctx.reply("‚ùå –≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ (–Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å)");
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await db.user.findUnique({
        where: { telegramId: BigInt(ctx.from.id) },
      });

      if (!user) {
        logger.error(`User not found`, {
          telegramId: ctx.from.id,
        });
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Prisma
      const updatedTransaction = await db.$transaction(async (prisma) => {
        // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const currentTransaction = await prisma.transaction.findUnique({
          where: { id: transactionId },
        });

        if (!currentTransaction || currentTransaction.status !== "PENDING") {
          throw new Error("Transaction is no longer available");
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        return prisma.transaction.update({
          where: { id: transactionId },
          data: {
            userId: user.id,
            status: "ACCEPTED",
            destination: destination,
          },
        });
      });

      logger.info(`Transaction successfully accepted`, {
        transactionId,
        operatorId: ctx.from.id,
        newStatus: updatedTransaction.status,
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
      this.userStates.set(ctx.from.id, {
        awaitingBalance: false,
        awaitingOperatorId: false,
        awaitingScreenshot: true,
        currentTransactionId: transactionId,
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
      await ctx.reply(
        `‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!\n\n` +
          `üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\n` +
          `\`${destination}\`\n\n` +
          `–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ.`,
        {
          parse_mode: "Markdown",
          reply_markup: this.getCancelKeyboard().reply_markup,
        },
      );

      // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç—å" –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (ctx.callbackQuery && "message" in ctx.callbackQuery) {
        await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
      }
    } catch (error) {
      logger.error(`Error in handleAcceptPayout`, {
        error: error instanceof Error ? error.message : String(error),
        transactionId,
        operatorId: ctx.from.id,
      });

      if (
        error instanceof Error &&
        error.message === "Transaction is no longer available"
      ) {
        await ctx.reply("‚ùå –≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
      } else {
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏");
      }
    }
  }

  private async handleScreenshotUpload(
    ctx: BotContext & {
      message: Message.PhotoMessage | Message.DocumentMessage;
    },
  ): Promise<void> {
    if (!ctx.from) return;

    const userState = this.userStates.get(ctx.from.id);
    if (!userState?.awaitingScreenshot || !userState.currentTransactionId) {
      return;
    }

    try {
      let fileId: string;
      if ("photo" in ctx.message) {
        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (—Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ) —Ñ–æ—Ç–æ
        fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      } else if ("document" in ctx.message) {
        fileId = ctx.message.document.file_id;
      } else {
        await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.");
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      const file = await ctx.telegram.getFile(fileId);
      if (!file.file_path) {
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.");
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
      const fileExt = file.file_path.split(".").pop() || "jpg";
      const fileName = `${Date.now()}_${userState.currentTransactionId}.${fileExt}`;
      const filePath = join(config.UPLOAD_DIR, fileName);

      // –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      const fileUrl = `https://api.telegram.org/file/bot${config.TELEGRAM_BOT_TOKEN}/${file.file_path}`;
      const response = await fetch(fileUrl);
      if (!response.ok) throw new Error("Failed to download file");

      const fileStream = createWriteStream(filePath);
      await pipeline(response.body!, fileStream);

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const user = await db.user.findUnique({
        where: { telegramId: BigInt(ctx.from.id) },
      });

      if (!user) {
        await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      await db.screenshot.create({
        data: {
          path: fileName,
          transactionId: userState.currentTransactionId,
          userId: user.id,
        },
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await db.transaction.update({
        where: { id: userState.currentTransactionId },
        data: { status: "COMPLETED" },
      });

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.userStates.set(ctx.from.id, {
        awaitingBalance: false,
        awaitingOperatorId: false,
        awaitingScreenshot: false,
      });

      await ctx.reply(
        "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n" +
          "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è.",
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      if (config.ADMIN_TELEGRAM_ID) {
        await this.bot.telegram.sendMessage(
          config.ADMIN_TELEGRAM_ID,
          `üîî –ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω\n` +
            `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${userState.currentTransactionId}\n` +
            `–û–ø–µ—Ä–∞—Ç–æ—Ä: ${ctx.from.username || ctx.from.id}`,
        );
      }
    } catch (error) {
      logger.error("Error handling screenshot:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞");
    }
  }

  private async handleCheckBalance(ctx: BotContext): Promise<void> {
    if (!ctx.from) return;

    try {
      const user = await db.user.findUnique({
        where: { telegramId: BigInt(ctx.from.id) },
      });

      if (!user) {
        await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      await ctx.reply(
        `üí∞ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ*\n\n` +
          `–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *${user.balance}* RUB\n` +
          `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: *${user.maxBalance}* RUB\n` +
          `üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString("ru-RU")}`,
        {
          parse_mode: "Markdown",
        },
      );
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", error);
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ");
    }
  }

  private async handleMessage(
    ctx: BotContext & { message: Message.TextMessage },
  ): Promise<void> {
    if (!ctx.from) return;

    const userState = this.userStates.get(ctx.from.id);
    if (!userState) return;

    if (userState.awaitingBalance) {
      await this.handleBalanceInput(ctx);
    } else if (userState.awaitingOperatorId) {
      await this.handleOperatorInput(ctx);
    }
  }

  private async handleBalanceInput(
    ctx: BotContext & { message: Message.TextMessage },
  ): Promise<void> {
    if (!ctx.from) return;

    const amount = parseFloat(ctx.message.text);

    if (isNaN(amount)) {
      await ctx.reply(
        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n\n–ü—Ä–∏–º–µ—Ä: 1000.50",
        {
          reply_markup: this.getCancelKeyboard().reply_markup,
        },
      );
      return;
    }

    if (amount < 0) {
      await ctx.reply("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π", {
        reply_markup: this.getCancelKeyboard().reply_markup,
      });
      return;
    }

    try {
      await db.user.update({
        where: { telegramId: BigInt(ctx.from.id) },
        data: { balance: amount, maxBalance: amount },
      });

      this.userStates.set(ctx.from.id, {
        awaitingBalance: false,
        awaitingOperatorId: false,
        awaitingScreenshot: false,
      });

      await ctx.reply(
        `‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n` +
          `üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *${amount}* RUB\n` +
          `üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString("ru-RU")}`,
        {
          parse_mode: "Markdown",
        },
      );

      await this.showMainMenu(ctx);
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–ª–∞–Ω—Å–∞:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∞–ª–∞–Ω—Å–∞");
    }
  }

  private async handleOperatorInput(
    ctx: BotContext & { message: Message.TextMessage },
  ): Promise<void> {
    if (!ctx.from) return;

    try {
      const operatorId = BigInt(ctx.message.text.trim());

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
      const existingUser = await db.user.findUnique({
        where: { telegramId: operatorId },
      });

      if (existingUser) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.user.update({
          where: { telegramId: operatorId },
          data: { isAdmin: true },
        });
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        await db.user.create({
          data: {
            telegramId: operatorId,
            isAdmin: true,
          },
        });
      }

      this.userStates.set(ctx.from.id, {
        awaitingBalance: false,
        awaitingOperatorId: false,
        awaitingScreenshot: false,
      });

      await ctx.reply(
        `‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ ${existingUser ? "–æ–±–Ω–æ–≤–ª—ë–Ω" : "–¥–æ–±–∞–≤–ª–µ–Ω"}!\n\n` +
          `üë§ ID: ${operatorId}`,
      );

      await this.showMainMenu(ctx);
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", error);
      await ctx.reply(
        "‚ùå –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID\n\n" +
          "ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞",
        {
          reply_markup: this.getCancelKeyboard().reply_markup,
        },
      );
    }
  }

  private async showHelp(ctx: BotContext): Promise<void> {
    let message = `ü§ñ *–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n`;

    if (ctx.state.isAdmin) {
      message +=
        `*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n` +
        `üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤\n` +
        `‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤\n` +
        `üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n` +
        `‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n\n`;
    }

    if (ctx.state.isOperator) {
      message +=
        `*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:*\n` +
        `üí∞ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫\n` +
        `üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤\n` +
        `üíµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç–∞–º–∏\n\n`;
    }

    message += `‚ùóÔ∏è –î–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ.`;

    await ctx.reply(message, {
      parse_mode: "Markdown",
      ...this.getMainKeyboard(ctx.state.isAdmin, ctx.state.isOperator),
    });
  }

  private setupHandlers(): void {
    this.bot.action(/ap:([^:]+):(\d+)/, async (ctx) => {
      if (!ctx.from) return;

      const [shortTxId, shortDestination] = (
        ctx.match as RegExpMatchArray
      ).slice(1);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const fullTransactionId = await this.getFullTransactionId(shortTxId);
      if (!fullTransactionId) {
        await ctx.reply("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞");
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –±–∞–∑—ã
      const transaction = await db.transaction.findUnique({
        where: { id: fullTransactionId },
      });

      if (!transaction) {
        await ctx.reply("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        return;
      }

      await this.handleAcceptPayout(
        ctx as BotContext,
        fullTransactionId,
        transaction.destination || "",
      );
      await ctx.answerCbQuery();
    });
    // –ö–æ–º–∞–Ω–¥–∞ start
    this.bot.command("start", async (ctx) => {
      await this.showMainMenu(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤
    this.bot.on("message", async (ctx) => {
      if ("photo" in ctx.message || "document" in ctx.message) {
        await this.handleScreenshotUpload(
          ctx as BotContext & {
            message: Message.PhotoMessage | Message.DocumentMessage;
          },
        );
      } else if ("text" in ctx.message) {
        await this.handleMessage(
          ctx as BotContext & { message: Message.TextMessage },
        );
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    this.bot.action("check_balance", async (ctx) => {
      if (!ctx.state.isOperator) {
        await ctx.answerCbQuery("‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        return;
      }

      await this.handleCheckBalance(ctx as BotContext);
      await ctx.answerCbQuery();
    });

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    this.bot.action("set_balance", async (ctx) => {
      if (!ctx.from || !ctx.state.isOperator) {
        await ctx.answerCbQuery("‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        return;
      }

      this.userStates.set(ctx.from.id, {
        awaitingBalance: true,
        awaitingOperatorId: false,
        awaitingScreenshot: false,
      });

      await ctx.reply(
        "üíµ *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞*\n\n" +
          "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞:\n" +
          "–ü—Ä–∏–º–µ—Ä: 1000.50\n\n" +
          "‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –∫–æ–ø–µ–µ–∫",
        {
          parse_mode: "Markdown",
          reply_markup: this.getCancelKeyboard().reply_markup,
        },
      );

      await ctx.answerCbQuery();
    });

    // –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    this.bot.action("list_operators", async (ctx) => {
      if (!ctx.state.isAdmin) {
        await ctx.answerCbQuery("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        return;
      }

      try {
        const operators = await db.user.findMany({
          where: { isAdmin: true },
        });

        if (operators.length === 0) {
          await ctx.reply("üìù –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
          return;
        }

        const operatorsList = operators
          .map(
            (op, index) =>
              `${index + 1}. ID: \`${op.telegramId}\`${
                op.username ? ` (@${op.username})` : ""
              }\nüí∞ –ë–∞–ª–∞–Ω—Å: *${op.balance}* RUB`,
          )
          .join("\n\n");

        await ctx.reply(
          `üë• *–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:*\n\n${operatorsList}\n\n` +
            `–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: ${operators.length}`,
          {
            parse_mode: "Markdown",
          },
        );
      } catch (error) {
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:", error);
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤");
      }

      await ctx.answerCbQuery();
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    this.bot.action("add_operator", async (ctx) => {
      if (!ctx.from || !ctx.state.isAdmin) {
        await ctx.answerCbQuery("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        return;
      }

      this.userStates.set(ctx.from.id, {
        awaitingBalance: false,
        awaitingOperatorId: true,
        awaitingScreenshot: false,
      });

      await ctx.reply(
        "üë§ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞*\n\n" +
          "–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n" +
          "–ü—Ä–∏–º–µ—Ä: 123456789\n\n" +
          "‚ùóÔ∏è ID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É @userinfobot",
        {
          parse_mode: "Markdown",
          reply_markup: this.getCancelKeyboard().reply_markup,
        },
      );

      await ctx.answerCbQuery();
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.bot.action("statistics", async (ctx) => {
      if (!ctx.state.isAdmin) {
        await ctx.answerCbQuery("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        return;
      }

      try {
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        const stats = await db.transaction.groupBy({
          by: ["status"],
          where: {
            createdAt: {
              gte: today,
            },
          },
          _count: true,
          _sum: {
            amount: true,
          },
        });

        const totalTransactions = await db.transaction.count({
          where: {
            createdAt: {
              gte: today,
            },
          },
        });

        const completedTransactions = stats.find(
          (s) => s.status === "COMPLETED",
        );
        const pendingTransactions = stats.find((s) => s.status === "PENDING");
        const failedTransactions = stats.find((s) => s.status === "FAILED");

        const message = `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*

–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalTransactions}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedTransactions?._count || 0}
‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${pendingTransactions?._count || 0}
‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ/–û—à–∏–±–∫–∏: ${failedTransactions?._count || 0}

üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: ${completedTransactions?._sum.amount?.toLocaleString("ru-RU") || 0} RUB
`;

        await ctx.reply(message, {
          parse_mode: "Markdown",
        });
      } catch (error) {
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
      }

      await ctx.answerCbQuery();
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    this.bot.action("settings", async (ctx) => {
      if (!ctx.state.isAdmin) {
        await ctx.answerCbQuery("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        return;
      }

      const message = `
‚öôÔ∏è *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*

–ú–∏–Ω. —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã: ${config.MIN_PAYOUT_AMOUNT} RUB
–ú–∞–∫—Å. —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã: ${config.MAX_PAYOUT_AMOUNT} RUB
–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ: ${config.PAYOUT_EXPIRES_IN / 60} –º–∏–Ω
–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${(config.SCREENSHOT_MAX_SIZE / 1024 / 1024).toFixed(1)} MB

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
`;

      await ctx.reply(message, {
        parse_mode: "Markdown",
      });
      await ctx.answerCbQuery();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å"
    this.bot.action(/accept_payout:(.+):(.+)/, async (ctx) => {
      const [transactionId, destination] = (
        ctx.match as RegExpMatchArray
      ).slice(1);
      await this.handleAcceptPayout(
        ctx as BotContext,
        transactionId,
        destination,
      );
      await ctx.answerCbQuery();
    });

    // –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
    this.bot.action("cancel_action", async (ctx) => {
      if (!ctx.from) return;

      const userState = this.userStates.get(ctx.from.id);
      if (userState?.currentTransactionId) {
        // –û—Ç–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
        await db.transaction.update({
          where: { id: userState.currentTransactionId },
          data: { status: "CANCELLED" },
        });
      }

      this.userStates.set(ctx.from.id, {
        awaitingBalance: false,
        awaitingOperatorId: false,
        awaitingScreenshot: false,
      });

      await ctx.reply("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
      await this.showMainMenu(ctx as BotContext);
      await ctx.answerCbQuery();
    });

    // –ü–æ–º–æ—â—å
    this.bot.action("help", async (ctx) => {
      await this.showHelp(ctx as BotContext);
      await ctx.answerCbQuery();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.catch((err: unknown) => {
      logger.error("Bot error:", err);
    });
  }

  public start(): void {
    this.bot.launch();
    logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω");

    process.once("SIGINT", () => this.bot.stop("SIGINT"));
    process.once("SIGTERM", () => this.bot.stop("SIGTERM"));
  }
}

export default new TelegramBot();
